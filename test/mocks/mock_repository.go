// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "ptcg_trader/pkg/model"

	repository "ptcg_trader/pkg/repository"

	testing "testing"
)

// MockRepository is an autogenerated mock type for the Repositorier type
type MockRepository struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *MockRepository) Begin(ctx context.Context) repository.Repositorier {
	ret := _m.Called(ctx)

	var r0 repository.Repositorier
	if rf, ok := ret.Get(0).(func(context.Context) repository.Repositorier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Repositorier)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockRepository) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockRepository) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountItems provides a mock function with given fields: ctx, query
func (_m *MockRepository) CountItems(ctx context.Context, query model.ItemQuery) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.ItemQuery) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ItemQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountOrders provides a mock function with given fields: ctx, query
func (_m *MockRepository) CountOrders(ctx context.Context, query model.OrderQuery) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderQuery) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OrderQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTransactions provides a mock function with given fields: ctx, query
func (_m *MockRepository) CountTransactions(ctx context.Context, query model.TransactionQuery) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.TransactionQuery) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.TransactionQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *MockRepository) CreateOrder(ctx context.Context, order *model.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, tx
func (_m *MockRepository) CreateTransaction(ctx context.Context, tx *model.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB provides a mock function with given fields: ctx
func (_m *MockRepository) DB(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetItem provides a mock function with given fields: ctx, query
func (_m *MockRepository) GetItem(ctx context.Context, query model.ItemQuery) (model.Item, error) {
	ret := _m.Called(ctx, query)

	var r0 model.Item
	if rf, ok := ret.Get(0).(func(context.Context, model.ItemQuery) model.Item); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ItemQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, query
func (_m *MockRepository) GetOrder(ctx context.Context, query model.OrderQuery) (model.Order, error) {
	ret := _m.Called(ctx, query)

	var r0 model.Order
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderQuery) model.Order); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OrderQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, query
func (_m *MockRepository) GetTransaction(ctx context.Context, query model.TransactionQuery) (model.Transaction, error) {
	ret := _m.Called(ctx, query)

	var r0 model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, model.TransactionQuery) model.Transaction); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.TransactionQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields: ctx, query
func (_m *MockRepository) ListItems(ctx context.Context, query model.ItemQuery) ([]model.Item, error) {
	ret := _m.Called(ctx, query)

	var r0 []model.Item
	if rf, ok := ret.Get(0).(func(context.Context, model.ItemQuery) []model.Item); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ItemQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: ctx, query
func (_m *MockRepository) ListOrders(ctx context.Context, query model.OrderQuery) ([]model.Order, error) {
	ret := _m.Called(ctx, query)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderQuery) []model.Order); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OrderQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransactions provides a mock function with given fields: ctx, query
func (_m *MockRepository) ListTransactions(ctx context.Context, query model.TransactionQuery) ([]model.Transaction, error) {
	ret := _m.Called(ctx, query)

	var r0 []model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, model.TransactionQuery) []model.Transaction); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.TransactionQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchOrders provides a mock function with given fields: ctx, order
func (_m *MockRepository) MatchOrders(ctx context.Context, order *model.Order) (model.Order, error) {
	ret := _m.Called(ctx, order)

	var r0 model.Order
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) model.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *MockRepository) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, f
func (_m *MockRepository) Transaction(ctx context.Context, f func(context.Context, repository.Repositorier) error) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, repository.Repositorier) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrders provides a mock function with given fields: ctx, query, updates
func (_m *MockRepository) UpdateOrders(ctx context.Context, query model.OrderQuery, updates model.OrderUpdates) error {
	ret := _m.Called(ctx, query, updates)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderQuery, model.OrderUpdates) error); ok {
		r0 = rf(ctx, query, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t testing.TB) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
