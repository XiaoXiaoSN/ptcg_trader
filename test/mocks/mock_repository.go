// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "ptcg_trader/pkg/model"

	mock "github.com/stretchr/testify/mock"

	repository "ptcg_trader/pkg/repository"
)

// MockRepository is an autogenerated mock type for the Repositorier type
type MockRepository struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *MockRepository) Begin(ctx context.Context) repository.Repositorier {
	ret := _m.Called(ctx)

	var r0 repository.Repositorier
	if rf, ok := ret.Get(0).(func(context.Context) repository.Repositorier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Repositorier)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockRepository) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockRepository) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountItems provides a mock function with given fields: ctx, query
func (_m *MockRepository) CountItems(ctx context.Context, query model.ItemQuery) (int64, error) {
	ret := _m.Called(ctx, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.ItemQuery) int64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ItemQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, query
func (_m *MockRepository) GetItem(ctx context.Context, query model.ItemQuery) (model.Item, error) {
	ret := _m.Called(ctx, query)

	var r0 model.Item
	if rf, ok := ret.Get(0).(func(context.Context, model.ItemQuery) model.Item); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ItemQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields: ctx, query
func (_m *MockRepository) ListItems(ctx context.Context, query model.ItemQuery) ([]model.Item, error) {
	ret := _m.Called(ctx, query)

	var r0 []model.Item
	if rf, ok := ret.Get(0).(func(context.Context, model.ItemQuery) []model.Item); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ItemQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *MockRepository) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, f
func (_m *MockRepository) Transaction(ctx context.Context, f func(context.Context, repository.Repositorier) error) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, repository.Repositorier) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
